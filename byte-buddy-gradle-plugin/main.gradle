logger.info("Compiling class files from version ${sourceCompatibility} to ${targetCompatibility}.")

java {
    new VersionHelper().with {
        sourceCompatibility = getVersionFor("net.bytebuddy.gradle.version.source")
        targetCompatibility = getVersionFor("net.bytebuddy.gradle.version.target")
    }
    if (Boolean.getBoolean('net.bytebuddy.misc.extras')) {
        withSourcesJar()
        withJavadocJar()
    }
}

String jdkHomeEnvVar = "JDK_${targetCompatibility.majorVersion}"
String javaHome = System.getenv("JDK_${targetCompatibility.majorVersion}")
if (javaHome == null) {
    logger.warn("""---------------------------------------------------------------------------------------
/!\\ The ${jdkHomeEnvVar} environment variable is not set to a ${targetCompatibility.majorVersion}. Falling back to current Java home
---------------------------------------------------------------------------------------""")
} else {
    tasks.withType(JavaCompile).configureEach {
        options.with {
            fork = true
            forkOptions.javaHome = file(javaHome)
            forkOptions.memoryMaximumSize = "512m"
        }
    }
    tasks.withType(Test).configureEach {
        executable = file("${javaHome}/bin/java")
    }
}
test {
    systemProperty('net.bytebuddy.test.version', version)
    systemProperty('net.bytebuddy.test.integration', Boolean.getBoolean('net.bytebuddy.test.integration'))
}

task copyLicense(type: Copy) {
    from '..'
    include 'LICENSE', 'NOTICE'
    into "$buildDir/resources/main/META-INF"
    def pattern = java.util.regex.Pattern.compile('\\$\\{([a-zA-Z0-9\\-._]+)}')
    filter { String line ->
        def matcher = pattern.matcher(line)
        def buffer = new StringBuffer()
        while (matcher.find()) {
            def property = matcher.group(1)
            String resolved
            if (property.equals("current.year")) {
                resolved = Calendar.getInstance().get(Calendar.YEAR)
            } else if (property.startsWith("project.")) {
                resolved = outerPom.getProperty(property.substring("project.".length()))
            } else {
                resolved = outerPom.properties.getProperty(property)
            }
            if (resolved == null) {
                throw new GradleException("Could not resolve property $property")
            }
            logger.debug("Resolved $property to $resolved")
            matcher.appendReplacement(buffer, resolved)
        }
        matcher.appendTail(buffer).toString()
    }
}

jar.dependsOn copyLicense
